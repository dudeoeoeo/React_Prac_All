let mongoose,Schema,bcrypt,jwt;_4fa‍.x([["default",()=>_4fa‍.o]]);_4fa‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}],["Schema",["Schema"],function(v){Schema=v}]]);_4fa‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]);_4fa‍.w("jsonwebtoken",[["default",["jwt"],function(v){jwt=v}]]);



const UserSchema = new Schema({
    username: String,
    hashedPassword: String,
});

UserSchema.methods.setPassword = async function(password) {
    const hash = await bcrypt.hash(password, 10);
    this.hashedPassword = hash;
};

UserSchema.methods.checkPassword = async function(password) {
    const result = await bcrypt.compare(password, this.hashedPassword);
    return result; // true or false
};

UserSchema.statics.findByUsername = function(username) {
    return this.findOne({ username });
};

UserSchema.methods.serialize = function() {
    const data = this.toJSON();
    delete data.hashedPassword;
    return data;
}

UserSchema.methods.generateToken = function() {
    const token = jwt.sign(
        // 첫 번째 파라미터에는 토큰 안에 집어넣고 싶은 데이터를 넣는다.
        {
            _id: this.id,
            username: this.username,
        },
        process.env.JWT_TOKEN, // 두 번째 파라미터로 JWT 암호를 넣는다.
        {
            expiresIn: '7d', // 7일 동안 유효
        },
    );
    return token;
}

const User = mongoose.model('User', UserSchema);
_4fa‍.d(User);